module Test.Runner.Node exposing (Program, Options, run, runWithOptions)

{-| Define programs that run your tests and outputs the results to the terminal.

An exit code of 1 will be set when there are failing tests.

@docs Program, run

## Customization

@docs Options, runWithOptions

-}

import Test exposing (Test)
import Node
import Init
import Test.Runner.Log as Log
import Random
import Terminal
import Time


{-| A value representing a test program.
-}
type alias Program =
    Node.SimpleProgram {}


-- RUN


{-| Run a test suite using default options.
-}
run : Test -> Program
run test =
    Node.defineSimpleProgram <| \env ->
        Init.awaitTask Time.now <| \time ->
        Init.await Terminal.initialize <| \termConfig ->
            Node.endSimpleProgramWithCmd <|
                Log.runWithOptions
                    { reportStreamOnPass = env.stdout
                    , reportStreamOnFail = env.stderr
                    , colorDepth = getColorDepth termConfig
                    }
                    100
                    (Random.initialSeed (Time.posixToMillis time))
                    test


-- RUN WITH OPTIONS


{-| Different options you can use to customize your test run.

* `runs` configures how many times a `fuzz` test is executed with different inputs.
* `seed` is used to generate random input in `fuzz` tests. A test suite run with the same seed will generate the same fuzz values.

-}
type alias Options =
    { runs : Int
    , seed : Random.Seed
    }


{-| Run a test suite using the provided options.
-}
runWithOptions : Options -> Test -> Program
runWithOptions options test =
    Node.defineSimpleProgram <| \env ->
        Init.await Terminal.initialize <| \termConfig ->
            Node.endSimpleProgramWithCmd <|
                Log.runWithOptions
                    { reportStreamOnPass = env.stdout
                    , reportStreamOnFail = env.stderr
                    , colorDepth = getColorDepth termConfig
                    }
                    options.runs
                    options.seed
                    test
           

getColorDepth : Maybe Terminal.Configuration -> Int
getColorDepth config =
    when config is
        Just { colorDepth } ->
            colorDepth
        Nothing ->
            1 -- lowest color depth (no colors)

